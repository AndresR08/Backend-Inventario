
//////////////////////////
backend/testServer.js
//////////////////////////

const express = require("express");
const app = express();

app.get("/prueba", (req, res) => {
  console.log("✅ Ruta de prueba funcionando");
  res.json({ mensaje: "Ruta funcionando correctamente" });
});

const PORT = 5001;
app.listen(PORT, () => console.log(`🚀 Servidor de prueba en el puerto ${PORT}`));

//////////////////////////
backend/server.js
//////////////////////////

// server.js - Configuracion del servidor principal
const express = require("express");
const cors = require("cors");
const helmet = require("helmet");
const cookieParser = require("cookie-parser");
const rateLimit = require("express-rate-limit");
const mongoose = require("mongoose");
const config = require("./config");
const productRoutes = require("./routes/productRoutes");
const saleRoutes = require("./routes/saleRoutes");
const userRoutes = require("./routes/userRoutes");
const authRoutes = require("./routes/authRoutes");

const app = express();

app.use(helmet());
app.use(cors({ origin: process.env.CLIENT_URL, credentials: true }));
app.use(express.json());
app.use(cookieParser());
app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));

mongoose.connect(config.mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log("✅ MongoDB conectado"))
  .catch((err) => console.error("❌ Error en MongoDB:", err));

app.use("/api/products", productRoutes);
app.use("/api/sales", saleRoutes);
app.use("/api/users", userRoutes);
app.use("/api/auth", authRoutes);

app.use((err, req, res, next) => {
  console.error("❌ Error global:", err);
  res.status(500).json({ message: "Error interno del servidor" });
});

app.listen(config.port, () => console.log(`🚀 Servidor en puerto ${config.port}`));
//////////////////////////
backend/testEnv.js
//////////////////////////

require("dotenv").config({ path: "./.env" });

console.log("JWT_SECRET del servidor:", process.env.JWT_SECRET);

//////////////////////////
backend/src/middlewares/auth.js
//////////////////////////

// backend/src/middlewares/auth.js
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const authMiddleware = async (req, res, next) => {
    const token = req.cookies.token || req.header("Authorization")?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "Acceso denegado. Token no proporcionado." });

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = await User.findById(decoded.id).select("-password");
        next();
    } catch (error) {
        return res.status(403).json({ message: "Token inválido o expirado." });
    }
};

module.exports = { authMiddleware };
//////////////////////////
backend/src/controllers/productController.js
//////////////////////////

// productController.js - Controlador de productos optimizado
const Product = require("../models/Product");
const { validationResult } = require("express-validator");

const createProduct = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  try {
    const newProduct = new Product(req.body);
    await newProduct.save();
    res.status(201).json(newProduct);
  } catch (error) {
    res.status(500).json({ message: "Error al crear producto" });
  }
};

const getProducts = async (_, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "Error al obtener productos" });
  }
};

const updateProduct = async (req, res) => {
  try {
    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedProduct) return res.status(404).json({ message: "Producto no encontrado" });
    res.json(updatedProduct);
  } catch (error) {
    res.status(500).json({ message: "Error al actualizar producto" });
  }
};

const deleteProduct = async (req, res) => {
  try {
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) return res.status(404).json({ message: "Producto no encontrado" });
    res.json({ message: "Producto eliminado" });
  } catch (error) {
    res.status(500).json({ message: "Error al eliminar producto" });
  }
};

module.exports = { createProduct, getProducts, updateProduct, deleteProduct };
//////////////////////////
backend/src/controllers/saleController.js
//////////////////////////

// backend/src/controllers/saleController.js
const Sale = require("../models/Sale");
const Product = require("../models/Product");

const createSale = async (req, res) => {
  try {
    const { productId, quantity } = req.body;

    // Validar que se reciben los campos necesarios
    if (!productId || !quantity) {
      return res.status(400).json({ message: "Faltan datos: productId y quantity son requeridos." });
    }

    // Buscar el producto
    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Producto no encontrado." });
    }

    // Calcular total y validar stock
    const total = product.price * quantity;
    if (product.stock < quantity) {
      return res.status(400).json({ message: "Stock insuficiente para realizar la venta." });
    }

    // Actualizar stock del producto
    product.stock -= quantity;
    await product.save();

    // Crear la venta (asumiendo que req.user viene del authMiddleware)
    const sale = new Sale({
      product: productId,
      quantity,
      total,
      user: req.user.id,
    });
    await sale.save();

    res.status(201).json({ message: "Venta registrada con éxito.", sale });
  } catch (error) {
    console.error("Error al registrar la venta:", error);
    res.status(500).json({ message: "Error en el servidor al registrar la venta.", error });
  }
};

module.exports = { createSale };

//////////////////////////
backend/src/controllers/userController.js
//////////////////////////

const User = require("../models/User");
const bcrypt = require("bcryptjs");

// Crear usuario
const createUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ error: "Faltan campos obligatorios" });
    }

    const newUser = new User({ name, email, password, role }); // No se hace hash manual
    await newUser.save();

    res.status(201).json(newUser);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


// Obtener todos los usuarios
const getUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Obtener un usuario por ID
const getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Usuario no encontrado" });
    }
    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Actualizar usuario
const updateUser = async (req, res) => {
  try {
    const { id } = req.params; // Obtener ID desde la URL
    const { name, email, password } = req.body;

    // Verificar si el usuario autenticado es el mismo que el que intenta modificar
    if (req.user.role !== "admin" && req.user.id !== id) {
      return res.status(403).json({ message: "No tienes permiso para modificar este usuario" });
    }

    const updatedData = { name, email };
    
    // Si el usuario envió una nueva contraseña, encriptarla
    if (password) {
      updatedData.password = await bcrypt.hash(password, 10);
    }

    const updatedUser = await User.findByIdAndUpdate(id, updatedData, { new: true });

    if (!updatedUser) {
      return res.status(404).json({ message: "Usuario no encontrado" });
    }

    res.json(updatedUser);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


// Eliminar usuario
const deleteUser = async (req, res) => {
  try {
    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Usuario no encontrado" });
    }
    res.status(200).json({ message: "Usuario eliminado correctamente" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

module.exports = {
  createUser,
  getUsers,
  getUserById,
  updateUser,
  deleteUser,
};

//////////////////////////
backend/src/routes/productRoutes.js
//////////////////////////

// productRoutes.js - Rutas de productos optimizadas
const express = require("express");
const { check } = require("express-validator");
const { authMiddleware, adminMiddleware } = require("../middlewares/auth");
const { createProduct, getProducts, updateProduct, deleteProduct } = require("../controllers/productController");

const router = express.Router();

router.get("/", getProducts);
router.post("/", authMiddleware, adminMiddleware, [
  check("name").notEmpty(),
  check("price").isNumeric(),
  check("stock").isInt(),
], createProduct);
router.put("/:id", authMiddleware, adminMiddleware, updateProduct);
router.delete("/:id", authMiddleware, adminMiddleware, deleteProduct);

module.exports = router;

//////////////////////////
backend/src/routes/authRoutes.js
//////////////////////////

const express = require("express");
const router = express.Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const { authMiddleware } = require("../middlewares/auth");
const rateLimit = require("express-rate-limit");

// ✅ Límite de intentos de login para evitar fuerza bruta
const loginLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 5, // Máximo 5 intentos
    message: "Demasiados intentos de inicio de sesión. Intenta de nuevo más tarde."
});

// ✅ Generar tokens de acceso y refresh
const generateTokens = (user) => {
    const accessToken = jwt.sign(
        { id: user._id, role: user.role },
        process.env.JWT_SECRET,
        { expiresIn: "15m" } // Acceso válido por 15 minutos
    );

    const refreshToken = jwt.sign(
        { id: user._id },
        process.env.REFRESH_SECRET,
        { expiresIn: "7d" } // Refresh token válido por 7 días
    );

    return { accessToken, refreshToken };
};

// ✅ RUTA DE REGISTRO
router.post("/register", async (req, res) => {
    try {
        const { name, email, password, role } = req.body;

        // Verificar si el usuario ya existe
        if (await User.findOne({ email })) {
            return res.status(400).json({ message: "El usuario ya existe" });
        }

        // ❌ No permitir que los usuarios elijan su rol (solo "user" por defecto)
        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ name, email, password: hashedPassword, role: "user" });
        await newUser.save();

        res.status(201).json({ message: "Usuario registrado con éxito" });
    } catch (error) {
        console.error("❌ Error registrando usuario:", error);
        res.status(500).json({ message: "Error en el servidor" });
    }
});

// ✅ RUTA DE LOGIN (con rate limiting)
router.post("/login", loginLimiter, async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: "Usuario no encontrado" });

        // Verificar la contraseña
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: "Contraseña incorrecta" });

        // Generar tokens
        const { accessToken, refreshToken } = generateTokens(user);

        // Enviar refresh token en una cookie segura
        res.cookie("refreshToken", refreshToken, {
            httpOnly: true,
            secure: true,
            sameSite: "Strict",
            maxAge: 7 * 24 * 60 * 60 * 1000 // 7 días
        });

        res.json({ accessToken, user: { id: user._id, name: user.name, email: user.email, role: user.role } });
    } catch (error) {
        console.error("❌ Error en el servidor:", error);
        res.status(500).json({ message: "Error en el servidor" });
    }
});

// ✅ RUTA PARA OBTENER NUEVO ACCESS TOKEN
router.post("/refresh", (req, res) => {
    const { refreshToken } = req.cookies;
    if (!refreshToken) return res.status(403).json({ message: "No hay token de sesión" });

    jwt.verify(refreshToken, process.env.REFRESH_SECRET, async (err, decoded) => {
        if (err) return res.status(403).json({ message: "Token inválido" });

        const user = await User.findById(decoded.id);
        if (!user) return res.status(403).json({ message: "Usuario no encontrado" });

        const { accessToken, refreshToken: newRefreshToken } = generateTokens(user);

        // Actualizar refresh token
        res.cookie("refreshToken", newRefreshToken, {
            httpOnly: true,
            secure: true,
            sameSite: "Strict",
            maxAge: 7 * 24 * 60 * 60 * 1000
        });

        res.json({ accessToken });
    });
});

// ✅ RUTA PARA OBTENER DATOS DEL USUARIO
router.get("/me", authMiddleware, async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select("-password");
        if (!user) return res.status(404).json({ message: "Usuario no encontrado" });
        res.json(user);
    } catch (error) {
        console.error("❌ Error obteniendo usuario:", error);
        res.status(500).json({ message: "Error en el servidor" });
    }
});

// ✅ RUTA PARA CERRAR SESIÓN (Eliminar refresh token)
router.post("/logout", (req, res) => {
    res.clearCookie("refreshToken", { httpOnly: true, secure: true, sameSite: "Strict" });
    res.json({ message: "Sesión cerrada exitosamente" });
});

module.exports = router;

//////////////////////////
backend/src/routes/saleRoutes.js
//////////////////////////

// saleRoutes.js - Rutas de ventas optimizadas
const saleRoutes = require("express").Router();
const { authMiddleware } = require("../middlewares/auth");
const { createSale, getSales } = require("../controllers/saleController");

saleRoutes.get("/", authMiddleware, getSales);
saleRoutes.post("/", authMiddleware, createSale);

module.exports = saleRoutes;

//////////////////////////
backend/src/routes/userRoutes.js
//////////////////////////

const express = require("express");
const {
  createUser,
  getUsers,
  getUserById,
  updateUser,
  deleteUser,
} = require("../controllers/userController"); 

const { authMiddleware } = require("../middlewares/auth");
const { adminMiddleware } = require("../middlewares/auth");

const router = express.Router();

router.post("/", authMiddleware, adminMiddleware, createUser);
router.get("/", authMiddleware, adminMiddleware, getUsers);
router.get("/:id", authMiddleware, getUserById);
router.put("/:id", authMiddleware, updateUser);
router.delete("/:id", authMiddleware, adminMiddleware, deleteUser);

module.exports = router;

//////////////////////////
backend/src/models/User.js
//////////////////////////

// models/User.js - Modelo de Usuario mejorado
const bcrypt = require("bcryptjs");
const UserSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  email: { type: String, required: true, unique: true, lowercase: true },
  password: { type: String, required: true },
  role: { type: String, enum: ["user", "admin"], default: "user" },
}, { timestamps: true });

// Encriptar contraseña antes de guardar
UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

module.exports = mongoose.model("User", UserSchema);
//////////////////////////
backend/src/models/Sale.js
//////////////////////////

// models/Sale.js - Modelo de Venta mejorado
const SaleSchema = new mongoose.Schema({
  product: { type: mongoose.Schema.Types.ObjectId, ref: "Product", required: true },
  user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  quantity: { type: Number, required: true, min: 1 },
  total: { type: Number, required: true },
}, { timestamps: true });

module.exports = mongoose.model("Sale", SaleSchema);
//////////////////////////
backend/src/models/Product.js
//////////////////////////

// models/Product.js - Modelo de Producto mejorado
const mongoose = require("mongoose");

const ProductSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  description: { type: String },
  price: { type: Number, required: true, min: 0 },
  stock: { type: Number, required: true, min: 0 },
  category: { type: String, required: true },
  stockMin: { type: Number, default: 5 },
  stockMax: { type: Number, default: 100 },
}, { timestamps: true });

module.exports = mongoose.model("Product", ProductSchema);

//////////////////////////
backend/config.js
//////////////////////////

// config.js - Centraliza todas las variables de entorno
require("dotenv").config();

module.exports = {
  mongoURI: process.env.MONGO_URI,
  jwtSecret: process.env.JWT_SECRET,
  refreshSecret: process.env.REFRESH_SECRET,
  port: process.env.PORT || 5000,
};